version: '3.5'
services:
  api01: # API - Instância 01
    build:
      context: .
    hostname: api01
    depends_on:
      - db
    expose:
      - "80"
    environment:
      URL_DB: 'jdbc:mysql://db:3306/persondb?useSSL=false'
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M
    networks:
      - app-network

  api02: # API - Instância 02
    build:
      context: .
    hostname: api02
    depends_on:
      - db
    expose:
      - "80"
    environment:
      URL_DB: 'jdbc:mysql://db:3306/persondb?useSSL=false'
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 500M
    networks:
      - app-network

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 500M
    networks:
      - app-network

  db:
    image: mysql:5.7
    hostname: db
    restart: always
    environment:
      MYSQL_DATABASE: 'persondb'
      MYSQL_USER: 'jjuser'
      MYSQL_PASSWORD: 'person'
      MYSQL_ROOT_PASSWORD: 'person'
    ports:
      - '3306:3306'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    command: --innodb_buffer_pool_size=512M --innodb_log_buffer_size=64M --innodb_flush_log_at_trx_commit=2 --innodb_flush_method=O_DIRECT

  adminer:
    image: adminer
    restart: always
    ports:
      - '8080:8080'

networks:
  app-network: